import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filters
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    try:
        city = input("Would you like to see data for chicago, new york city or washington? type one of them.\n").lower()
        df = pd.read_csv(CITY_DATA[city])
        while city not in CITY_DATA:
            city = input("Choose one of these cities (chicago, new york city or washington).\n").lower()
    except:
        while city not in CITY_DATA:
            city = input("Choose one of these cities (chicago, new york city or washington).\n").lower()

    # get user input for month (all, january, february, ... , june)
    month = input("Which month you want to filter? please type(all, january, february, march, april, may, june). \n").lower()
    amonth=['all', 'january', 'february', 'march',  'april', 'may', 'june']
    while month not in amonth:
        month = input("Choose one of these months(all, january, february, march, april, may, june). \n").lower()

    # get user input for day of week (all, monday, tuesday, ... sunday)
    day = input("Which day of week? please type(all, monday, tuesday, wednesday, thursday, friday, saturday, sunday).\n").lower()
    aday=['all', 'monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    while day not in aday:
        day = input("Which day of week? please type(all, monday, tuesday, wednesday, thursday, friday, saturday, sunday).\n").lower()


    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(CITY_DATA[city])

    # define the column as datetime column
    df['Start Time'] = pd.to_datetime(df['Start Time'])

    # creating month and day_of_week columns
    df['month'] = df['Start Time'].dt.month
    df['day_of_week'] = df['Start Time'].dt.weekday_name

    if month != 'all':
        # use the index of the months list to get the corresponding int
        months = ['january', 'february', 'march', 'april', 'may', 'june']
        month = months.index(month)+1


        # filter by month to create the new dataframe
        df = df.loc[df['month'] == month]

    # filter by day of week if applicable
    if day != 'all':
        # filter by day of week to create the new dataframe
        df = df[df['day_of_week'] == day.title()]


    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # display the most common month
    most_common_month = df['month'].mode()[0]
    months = ['january', 'february', 'march', 'april', 'may', 'june']
    most_common_month = months[most_common_month-1]
    print("the most common month: ", most_common_month)


    # display the most common day of week
    most_common_day = df['day_of_week'].mode()[0]
    print("the most common day of week: ", most_common_day)


    # display the most common start hour
    most_common_start_hour = df['hour']= df['Start Time'].dt.hour.mode()[0]
    print("the most common start hour: ", most_common_start_hour)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # display most commonly used start station
    most_common_start_station = df['Start Station'].mode()[0]
    print('The most commonly used start station: ', most_common_start_station)

    # display most commonly used end station
    most_common_end_station = df['End Station'].mode()[0]
    print('The most commonly used end station: ', most_common_end_station)

    # display most frequent combination of start station and end station trip
    df['comination'] = df['Start Station'] + " : " + df['End Station']
    most_frequent_travel = df['comination'].mode()[0]
    print('The most frequent combination of start station and end station trip: ', most_frequent_travel)



    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # display total travel time
    total_travel_duration = df['Trip Duration'].sum()
    print('The total travel time: ', total_travel_duration)


    # display mean travel time
    mean_travel_time = df['Trip Duration'].mean()
    print('The average of travel time: ', mean_travel_time)


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # Display counts of user types
    user_types_count = df['User Type'].value_counts()
    print('The count of subscribers and customers:\n',user_types_count)

    # Display counts of gender
    try:
        gender_count = df['Gender'].value_counts()
        print('the count of each gender:\n', gender_count)
    except:
        print('Unfortunately, there is no data available about gender in Washington city.')


    # Display earliest, most recent, and most common year of birth
    try:
        earliest_birth_year = df['Birth Year'].min()
        print('The earliest year of birth: ', earliest_birth_year)
        most_recent_birth_year = df['Birth Year'].max()
        print('The most recent year of birth: ', most_recent_birth_year)
        most_common_birth_year = df['Birth Year'].mode()
        print('The most common year of birth: ', most_common_birth_year)
    except:
        print('Unfortunately, there is no data available about birth year in Washington city.')


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df)

        # Display 5 rows to user
        first_rows_display = input('\nWould you like to display the first 5 rows of your data? Enter yes or no.\n').lower()
        while (first_rows_display != 'yes') and (first_rows_display != 'no'):
            first_rows_display = input('write yes or no only\n').lower()

        if first_rows_display == 'yes':
            display_first_5 = df.head()
            print(display_first_5)

            # Display the  next 5 rows
            next_rows_display = input('\nWould you like to display the next 5 rows of your data? Enter yes or no.\n').lower()
            while (next_rows_display != 'yes') and (next_rows_display != 'no'):
                next_rows_display = input('write yes or no only:\n').lower()

            first_i, last_i = 6, 10
            while next_rows_display == 'yes':
                display_first_5 = df[first_i : last_i]
                print(display_first_5)

                next_rows_display = input('\nWould you like to display the next 5 rows of your data? Enter yes or no.\n').lower()
                while (next_rows_display != 'yes') and (next_rows_display != 'no'):
                    next_rows_display = input('write yes or no only:\n').lower()
                first_i += 5
                last_i += 5



        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()
